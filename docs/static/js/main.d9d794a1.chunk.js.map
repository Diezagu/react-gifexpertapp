{"version":3,"sources":["Components/AddCategory.js","Components/GifGridItem.js","helpers/getGifs.js","Components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","GifGridItem","id","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","images","downsized_medium","console","log","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","categories","i","ReactDOM","render","document","getElementById"],"mappings":"oMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAC7B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAWE,OACD,sBAAMC,SARc,SAACC,GACrBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC9BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAIf,SACI,uBACIO,KAAK,OACXC,MAAOT,EACPU,SAfuB,SAACP,GAC1BF,EAAeE,EAAEQ,OAAOF,a,OCJbG,EAAc,SAAC,GAAuB,EAArBC,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IACvC,OACE,sBAAKC,UAAY,yCAAjB,UACE,qBAAKC,IAAMF,EAAMG,IAAOJ,IACxB,4BAAKA,Q,uBCNEK,EAAO,uCAAI,WAAOC,GAAP,uBAAAC,EAAA,6DAChBN,EADgB,iDACiCO,UAAUF,GAD3C,+DAEHG,MAAOR,GAFJ,cAEhBS,EAFgB,gBAGCA,EAAKC,OAHN,uBAGdC,EAHc,EAGdA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC5B,MAAO,CACLhB,GAAIgB,EAAIhB,GACRC,MAAOe,EAAIf,MACXC,IAAG,UAAEc,EAAIC,cAAN,aAAE,EAAYC,iBAAiBhB,QAGtCiB,QAAQC,IAAKN,GAZS,kBAafA,GAbe,4CAAJ,sDCKPO,EAAU,SAAC,GAAkB,IAAhBd,EAAe,EAAfA,SACxB,ECH0B,SAAEA,GAC5B,MAA0BrB,mBAAS,CACjC2B,KAAM,GACNS,SAAS,IAFX,mBAAOC,EAAP,KAAcC,EAAd,KAiBA,OAZAC,qBAAW,WAETnB,EAASC,GACNmB,MAAM,SAAAC,GACLH,EAAS,CACPX,KAAMc,EACNL,SAAS,SAIf,CAAEf,IAEGgB,EDf2BK,CAAcrB,GAAlCU,EAAd,EAAQJ,KAAcS,EAAtB,EAAsBA,QAEtB,OACE,qCACE,6BAAMf,IACJe,GAAW,wCACb,qBAAKnB,UAAY,YAAjB,SAEMc,EAAOF,KAAI,SAACC,GAAD,OACT,wBAAC,EAAD,2BACMA,GADN,IAEEa,IAAQb,EAAIhB,eEbf8B,EAAe,WAE1B,MAAoC5C,mBAAS,CAAC,SAA9C,mBAAO6C,EAAP,KAAmB9C,EAAnB,KAKA,OACE,qCACE,8CACA,cAAC,EAAD,CAAa8C,WAAcA,EAAY9C,cAAgBA,IACvD,uBAEA,6BAEI8C,EAAWhB,KAAK,SAACR,EAAUyB,GAAX,OACd,cAAC,EAAD,CACEzB,SAAaA,GACNA,Y,MChBrB0B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.d9d794a1.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ( {setCategories} ) => {\r\n\tconst [inputValue, setInputValue] = useState('');\r\n\tconst handleInputChange = (e) => {\r\n\t\tsetInputValue( e.target.value );\r\n\t}\r\n\tconst handleSubmit = (e) =>{\r\n\t\te.preventDefault();\r\n\t\tif (inputValue.trim().length > 2) {\r\n\t\t\tsetCategories(cats => [inputValue, ...cats]);\r\n\t\t\tsetInputValue('');\r\n\t\t}\r\n\t}\r\n  \treturn (\r\n\t\t<form onSubmit={ handleSubmit }>\r\n    \t\t<input\r\n        \t\ttype='text'\r\n\t\t\t\tvalue={inputValue}\r\n\t\t\t\tonChange = { handleInputChange }\r\n      \t\t/>\r\n\t\t</form>\r\n  \t)\r\n}\r\n\r\nAddCategory.propTypes = {\r\n\tsetCategories: PropTypes.func.isRequired\r\n}\r\n","import React from 'react'\r\n\r\nexport const GifGridItem = ({ id, title, url }) => {\r\n  return (\r\n    <div className = \"card animate__animated animate__fadeIn\">\r\n      <img src={ url } alt = {title}></img>\r\n      <p>{ title }</p>\r\n    </div>\r\n  )\r\n}\r\n","export const getGifs =  async( category ) =>{\r\n  const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=O0cDnjkoMG1V4yA0e50ImUJ1nOay0XEt`;\r\n  const resp = await fetch( url );\r\n  const { data } = await resp.json();\r\n\r\n  const gifs = data.map( img => {\r\n    return {\r\n      id: img.id,\r\n      title: img.title,\r\n      url: img.images?.downsized_medium.url\r\n    }\r\n  })\r\n  console.log( gifs );\r\n  return gifs;\r\n}","// import React, { useState, useEffect } from 'react'\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\"\r\n\r\nexport const GifGrid = ({ category }) => {\r\n  const { data: images, loading } = useFetchGifs( category );\r\n\r\n  return (\r\n    <>\r\n      <h3>{ category }</h3>\r\n      { loading && <p>Loading</p>}\r\n      <div className = \"card-grid\">\r\n          {\r\n            images.map((img) => \r\n              <GifGridItem \r\n                {...img}\r\n                key = { img.id }\r\n              />\r\n            )\r\n          }\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n","import { useState, useEffect } from \"react\"\r\nimport { getGifs } from '../helpers/getGifs'\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n  const [state, setState] = useState({\r\n    data: [],\r\n    loading: true\r\n  });\r\n\r\n  useEffect( () => {\r\n\r\n    getGifs( category )\r\n      .then (imgs => {\r\n        setState({\r\n          data: imgs,\r\n          loading: false\r\n        })\r\n      });\r\n\r\n  },[ category ]);\r\n\r\n  return state;\r\n}","import React, { useState } from 'react';\r\nimport { AddCategory } from './Components/AddCategory';\r\nimport { GifGrid } from './Components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n  // const categories =['One Punch','Samurai x','Dragon Ball'];\r\n  const [categories, setCategories] = useState(['Bass']);\r\n  // const handleAdd = () =>{\r\n  //   setCategories( [...categories , 'Malcolm'] );\r\n  // }\r\n\r\n  return (\r\n    <>\r\n      <h2>GifExpertApp</h2>\r\n      <AddCategory categories = {categories} setCategories={ setCategories }></AddCategory>\r\n      <hr></hr>\r\n      \r\n      <ol>\r\n        { \r\n          categories.map( (category, i) =>  \r\n            <GifGrid \r\n              category = { category }\r\n              key = {category}\r\n              />\r\n          )\r\n        }\r\n      </ol>\r\n    </>\r\n  )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}